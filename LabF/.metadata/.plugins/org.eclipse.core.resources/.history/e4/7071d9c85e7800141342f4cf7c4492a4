import java.util.Iterator;

public class BSTSortedList<T extends Comparable<? super T>> implements SortedListInterface<T> {
	
	private BinarySearchTree<T> tree;
	
	public BSTSortedList() {
		tree = new BinarySearchTree<T>();
	}

	public boolean add(T newEntry) {
		return tree.add(newEntry) != null;
	}

	public boolean remove(T anEntry) {
		return tree.remove(anEntry) != null;
	}

	public int getPosition(T anEntry) {
		return 0;
	}

	public T getEntry(int givenPosition) {
		Iterator<T> iterator = tree.getPreorderIterator();
		int count = 0;
		if(givenPosition > getLength())
			return null;
		while(givenPosition - 1 != count){
			iterator.next();
			count++;
		}
		return iterator.next();
	}

	public boolean contains(T anEntry) {
		return tree.contains(anEntry);
	}

	public T remove(int givenPosition) {
		return null;
	}

	public void clear() {
		if(isEmpty())
			return;
		Iterator<T> iterator = tree.getPreorderIterator();	
		do{
			iterator.remove();
		}while(iterator.hasNext());
	}

	public int getLength() {
		Iterator<T> iterator = tree.getPreorderIterator();
		int count = 0;
		while(iterator.hasNext())
			count++;
		return count;
	}

	public boolean isEmpty() {
		return tree.isEmpty();
	}

	public boolean isFull() {
		return false;
	}

	public void display() {
		
	}

}
